subprojects {
    apply plugin: 'java'

    // Tell gradle to use Maven central repository
    repositories {
        mavenCentral()
    }

    sourceSets {
        // Mark the directory for sources in all subprojects
        main {
            java {
                srcDirs = ['./']
            }
        }
    }

    afterEvaluate {
        // compiler arguments to use with Java 9 compiler
        compileJava {
            inputs.property("moduleName", moduleName)
            doFirst {
                options.compilerArgs = [
                        '--module-path', classpath.asPath,
                ]
                classpath = files()
            }
        }
    }
}

apply plugin: 'java'

dependencies {
    compile project(':org.aamvrosov.java9.common')
    compile project(':org.aamvrosov.java9.main')
    compile project(':org.aamvrosov.java9.fabrics')
    compile project(':org.aamvrosov.java9.process.api.improvements')
}

clean.doLast {
    new File('./dist').deleteDir()
}

// Copy all dependencies to dist directory
task copyAll(type: Copy) {
    from configurations.runtime
    into "${project.projectDir}/dist"
}
task copyAllWrapper(type: GradleBuild) {
    tasks = ['copyAll']
}

build.doLast {
    copyAllWrapper.execute()

    // Creating startup script for jar-based modular Java 9 application
    File startupScriptForUnix = new File("${project.projectDir}/dist/run.sh")
    startupScriptForUnix.text = "#!/bin/bash\n\n" +
            "*** Startup script, created with groovy ***\n\n" +
            System.getProperty("java.home") + "/bin/java -p . -m org.aamvrosov.java9.main/org.aamvrosov.java9.main.Main"
    ant.chmod(file: startupScriptForUnix.getPath(), perm: "ugo+rx")

    File startupScriptForWindows = new File("${project.projectDir}/dist/run.bat")
    startupScriptForWindows.text = "rem *** Startup script, created with groovy ***\n\n" +
            System.getProperty("java.home") + "\\bin\\java.exe -p . -m org.aamvrosov.java9.main/org.aamvrosov.java9.main.Main"
}

task runOnWindows(type: Exec) {
    workingDir 'dist'
    commandLine 'cmd.exe', '/c', '"run.bat"'
}

task runOnLinux(type: Exec) {
    workingDir 'dist'
    commandLine './run.sh'
}

import org.apache.tools.ant.taskdefs.condition.Os
task run {
    doLast {
        // Running built application in dependence of current OS
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            println "*** WINDOWS run --- "
            runOnWindows.execute()
        }
        if (Os.isFamily(Os.FAMILY_UNIX)) {
            println "*** LINUX run --- "
            runOnLinux.execute()
        }
    }
}